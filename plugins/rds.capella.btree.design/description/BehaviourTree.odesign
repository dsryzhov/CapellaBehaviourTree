<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/sequence/description/2.0.0" xmlns:description_2="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/sequence/description/tool/2.0.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" xmlns:tool_2="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" name="BTree" version="12.0.0.2017041100">
  <ownedViewpoints name="Behaviour Tree Viewpoint" label="Behaviour Tree Viewpoint">
    <ownedRepresentations xsi:type="description_1:SequenceDiagramDescription" dropDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='FncDragDropId']" name="BTtree Sequenece Diagram" label="Behaviour Tree (FD) Sequence Diagram" domainClass="interaction.Scenario" endsOrdering="aql:self.makeIntersection(self.ownedInteractionFragments, eventEnds)" instanceRolesOrdering="feature:ownedInstanceRoles">
      <defaultLayer name="Default">
        <nodeMappings xsi:type="description_1:InstanceRoleMapping" name="Instancerole Mapping FS2" semanticCandidatesExpression="feature:ownedInstanceRoles" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
          <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <labelDirectEdit href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20instance%20role%20FS']"/>
          <borderedNodeMappings xsi:type="description_1:ExecutionMapping" name="default execution FS2" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole" reusedBorderedNodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS2']/@borderedNodeMappings[name='default%20execution%20FS2']/@borderedNodeMappings[name='Execution%20FS2']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS']" startingEndFinderExpression="aql:self" finishingEndFinderExpression="aql:self">
            <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
            <borderedNodeMappings xsi:type="description_1:ExecutionMapping" name="Execution FS2" semanticCandidatesExpression="aql:self.getExecutionsFromInstanceRoleOrParentExecution()" synchronizationLock="true" domainClass="interaction.Execution" reusedBorderedNodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS2']/@borderedNodeMappings[name='default%20execution%20FS2']/@borderedNodeMappings[name='Execution%20FS2']" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
              <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
              <borderedNodeMappings xsi:type="description_1:StateMapping" name="InteractionState Mapping FS" semanticCandidatesExpression="aql:self.getInteractionStatesOnExecution()" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.StateFragment" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
                <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']"/>
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" labelPosition="node" resizeKind="NSEW" width="10" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
                </style>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() > 0">
                  <style xsi:type="style:EllipseNodeDescription" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() = 0">
                  <style xsi:type="style:EllipseNodeDescription" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']"/>
                  </style>
                </conditionnalStyles>
              </borderedNodeMappings>
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3">
                <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
                <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
                <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
              </style>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance->filter(fa::AbstractFunction)->first().ownedPropertyValues->select( p | p.name.equals('BTreeNodeType') and p.value.name.equals('Sequence'))->size()=1">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" hideLabelByDefault="true" resizeKind="NSEW" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('BTree')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
                  <labelFormat>bold</labelFormat>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('Sequence')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('ReactiveSequence')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.representedInstance.checkBTreeNodeType('SequenceStar')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('Fallback')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('ReactiveFallback')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('Condition')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('Parallel')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_blue']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('Repeat')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('Retry')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('Inverter')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NSEW" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('ForceSuccess')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.checkBTreeNodeType('ForceFailure')">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_1:EndOfLifeMapping" name="Lifeline deletion mapping FS2" preconditionExpression="aql:self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self)" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
              <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20FS']"/>
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/eol.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_1:EndOfLifeMapping" name="endOfLife FS2" preconditionExpression="aql:not (self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self))" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.InstanceRole">
              <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='No%20Delete']"/>
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/handlelifeline.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" sizeComputationExpression="" labelPosition="node" resizeKind="NSEW" width="1" height="40">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Lifeline_Gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getInstanceRoleLabel()" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
            <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
            <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('BTree')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" labelPosition="node" resizeKind="NSEW" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('Sequence')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('ReactiveSequence')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.representedInstance.checkBTreeNodeType('SequenceStar')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('Fallback')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('ReactiveFallback')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('Condition')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('Parallel')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_blue']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('Repeat')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('Retry')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('Inverter')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('ForceSuccess')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.checkBTreeNodeType('ForceFailure')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings xsi:type="description_1:BasicMessageMapping" name="Basic message mapping FS2" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::SYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::ASYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::UNSET)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS2']/@borderedNodeMappings[name='default%20execution%20FS2'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS2']/@borderedNodeMappings[name='default%20execution%20FS2']/@borderedNodeMappings[name='Execution%20FS2']" targetMapping="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS2']/@borderedNodeMappings[name='default%20execution%20FS2'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS2']/@borderedNodeMappings[name='default%20execution%20FS2']/@borderedNodeMappings[name='Execution%20FS2']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <labelDirectEdit href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20FS']"/>
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="aql:self.ownedPropertyValues->select( p | p.name.equals('TickResult') and p.value.equals('SUCCESS'))->size()==1">
            <style lineStyle="dash" sourceArrow="Diamond" sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.ownedPropertyValues->select( p | p.name.equals('TickResult') and p.value.equals('FAILURE'))->size()==1">
            <style lineStyle="dash" sourceArrow="Diamond" sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_orange']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_orange']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.ownedPropertyValues->select( p | p.name.equals('TickResult') and p.value.equals('RUNNING'))->size()==1">
            <style lineStyle="dash" sourceArrow="Diamond" sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.ownedPropertyValues->select( p | p.name.equals('TickResult'))->size()==1">
            <style lineStyle="dash" sourceArrow="Diamond">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <toolSections>
          <ownedTools xsi:type="tool:InstanceRoleCreationTool" documentation="Insert/Remove Functions. Creates or delete semantic Lifelines representing existing Functions. Removing a Lifeline from a scenario deletes incoming and outgoing sequence messages, but does not delete from model the represented Functions and related Functional Exchanges." name="functions" label="Functions" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Function" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.eContainerOrSelf(capellacore::ModellingArchitecture).ownedFunctionPkg.eAllContents()->filter(fa::AbstractFunction)"/>
                  <parameters name="initialSelection" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance"/>
                  <parameters name="wizardMessage" value=""/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(result)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i)"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                  <parameters name="result" value="aql:self.void2Null(result)"/>
                  <parameters name="current" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange3" label="Tick message" precondition="aql:preTarget.representedInstance.eContainer() == preSource.representedInstance or preTarget.representedInstance.eContainer() == preSource.covered.representedInstance" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceIR.representedInstance.ownedFunctions->includes(targetIR.representedInstance)">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:targetIR.representedInstance.name"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="tickResult"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:tickResult">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="TickResult"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange.successtick" label="Seccess tick" precondition="aql:preTarget.representedInstance.eContainer() == preSource.representedInstance or preTarget.representedInstance.eContainer() == preSource.covered.representedInstance" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceIR.representedInstance.ownedFunctions->includes(targetIR.representedInstance)">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:targetIR.representedInstance.name"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="tickResult"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:tickResult">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="TickResult"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="SUCCESS"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange.failuretick" label="Failure tick" precondition="aql:preTarget.representedInstance.eContainer() == preSource.representedInstance or preTarget.representedInstance.eContainer() == preSource.covered.representedInstance" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceIR.representedInstance.ownedFunctions->includes(targetIR.representedInstance)">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:targetIR.representedInstance.name"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="tickResult"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:tickResult">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="TickResult"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="FAILURE"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange.runningtick" label="Running tick" precondition="aql:preTarget.representedInstance.eContainer() == preSource.representedInstance or preTarget.representedInstance.eContainer() == preSource.covered.representedInstance" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceIR.representedInstance.ownedFunctions->includes(targetIR.representedInstance)">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:targetIR.representedInstance.name"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="tickResult"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:tickResult">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="TickResult"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="RUNNING"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange2" label="Data flow" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="FEF"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ContainerDropDescription" name="FncDragDropId" mappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtree%20Sequenece%20Diagram']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS2']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:element"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:PopupMenu" name="SetTickResultMenu" label="Tick result" precondition="true">
            <menuItemDescription xsi:type="tool_1:OperationAction" name="SetTickSuccessMenuAction" label="SUCCESS">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('TickResult'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="SUCCESS"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="SetTickFailureMenuAction" label="FAILURE">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('TickResult'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="FAILURE"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="SetTickRunningMenuAction" label="RUNNING">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('TickResult'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="RUNNING"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="SetTickUndefinedMenuAction" label="UNDEFINED">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('TickResult'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="BTreeDefinition" label="Behaviour Tree (FD) Definition Diagram" domainClass="AbstractFunction" enablePopupBars="true">
      <layout xsi:type="description_2:CustomLayoutConfiguration" id="org.eclipse.elk.graphviz.dot" label="Dot" description="Layered drawings of directed graphs. The algorithm aims edges in the same direction (top to bottom, or left to right) and then attempts to avoid edge crossings and reduce edge length. Edges are routed as spline curves and are thus drawn very smoothly. This algorithm is very suitable for state machine and activity diagrams, where the direction of edges has an important role."/>
      <defaultLayer name="Default">
        <nodeMappings name="BTreeNode" deletionDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20LF']" labelDirectEdit="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20Logical%20Function']" semanticCandidatesExpression="service:getFBDSemanticFunctions()" domainClass="AbstractFunction">
          <detailDescriptions xsi:type="tool_2:DiagramCreationDescription" href="#//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Function%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_2:DiagramCreationDescription" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Data%20Flow%20Blank']"/>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('BTree')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" iconPath="/rds.capella.btree.design/icons/full/obj16/BTree.gif" labelPosition="node" resizeKind="NSEW" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('Sequence')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Sequence.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('ReactiveSequence')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveSequence.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('SequenceStar')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/SequenceStar.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('Fallback')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Fallback.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('ReactiveFallback')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveFallback.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('Action')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Action.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('Condition')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Condition.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('Parallel')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Parallel.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_blue']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('Repeat')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Repeat.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('Retry')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Retry.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('Inverter')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Ibverter.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('ForceSuccess')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ForceSuccess.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.checkBTreeNodeType('ForceFailure')">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ForceFailure.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="LFB_LogicalFunction_subFunctions" deletionDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20subFunctionLink']" semanticCandidatesExpression="aql:self.eAllContents()" sourceMapping="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" targetMapping="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" targetFinderExpression="service:getFBDParentFunction()" reconnections="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@toolSections.0/@ownedTools[name='changeContainer']">
          <style sourceArrow="InputArrow" targetArrow="NoDecoration" routingStyle="manhattan" foldingStyle="TARGET">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <toolSections name="BTreeToolsId" label="Behaviour Tree">
          <ownedTools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.action" label="Action" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/Action.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('Action')"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.condition" label="Condition" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/Condition.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('Condition')"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.parallel" label="Parallel" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/Parallel.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('Parallel')"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ToolGroup" name="SequenceGroup">
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.sequence" label="Sequence" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/Sequence.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('Sequence')"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.eContainer().target">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self = container and not(self.checkBTreeNodeType('BTree'))">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="nodeTypePrp"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:nodeTypePrp">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="BTreeNodeType"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="BTree"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.reactivesequence" label="ReactiveSequence" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveSequence.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('ReactiveSequence')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.sequencestar" label="SequenceStar" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/SequenceStar.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('SequenceStar')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ToolGroup" name="FallbackGroup">
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.fallback" label="Fallback" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/Fallback.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('Fallback')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.reactivefallback" label="ReactiveFallback" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveFallback.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('ReactiveFallback')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ToolGroup" name="DecoratorGroup">
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.repeat" label="Repeat" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/Repeat.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('Repeat')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.retry" label="Retry" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/Retry.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('Retry')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.inverter" label="Inverter" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/Inverter.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('Inverter')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.forcesuccess" label="ForceSuccess" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/ForceSuccess.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('ForceSuccess')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" documentation="Creates a new Logical Function in the target Function" name="logical.function.forcefailure" label="ForceFailure" precondition="aql:containerView.isValidCreationDFFunction() and container.isBTreeContainerNode()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']" iconPath="/rds.capella.btree.design/icons/full/obj16/ForceFailure.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@nodeMappings[name='BTreeNode']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createBTreeNode('ForceFailure')"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:EdgeCreationDescription" documentation="Sets the target Function as the new container of the source Function" name="contained.in" label="Contained in" precondition="aql:preSource.isValidDndDFBAbstractFunction(preTargetView) and  preTarget.isBTreeContainerNode()" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinition']/@defaultLayer/@edgeMappings[name='LFB_LogicalFunction_subFunctions']" iconPath="/org.polarsys.capella.core.sirius.analysis/description/images/containedIn.png">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.dndDFBAbstractFunction(source.eContainer(),target)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DiagramCreationDescription" name="Logical Function Breakdown" precondition="aql:self.isInLib() and self->filter(la::LogicalFunction)->size() > 0" titleExpression="aql:'[LFBD] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Function%20Breakdown']"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ReconnectEdgeDescription" name="changeContainer" precondition="aql:element.isValidDndDFBAbstractFunction(targetView)" forceRefresh="true">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndDFBAbstractFunction(source,target)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DirectEditLabel" name="rename Logical Function" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DeleteElementDescription" name="delete LF">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DeleteElementDescription" name="Delete subFunctionLink">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target.dndDFBAbstractFunction(elementView.sourceNode.target.eContainer(),containerView.target)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:PopupMenu" name="BTreeNodeTypeChangePM" label="Change Behaviour Tree Node Type">
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NodeType2ActionlMI" label="to Action">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('BTreeNodeType'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="Action"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NodeType2ConditionlMI" label="to Condition">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('BTreeNodeType'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="Condition"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NodeType2SequenceMI" label="to Sequence">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('BTreeNodeType'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="Sequence"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NodeType2ReactiveSequenceMI" label="to ReactiveSequence">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('BTreeNodeType'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="ReactiveSequence"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NodeType2SequenceStarMI" label="to SequenceStar">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('BTreeNodeType'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="SequenceStar"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NodeType2FallbackMI" label="to Fallback">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('BTreeNodeType'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="Fallback"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NodeType2ReactiveFallbackMI" label="to ReactiveFallback">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('BTreeNodeType'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="ReactiveFallback"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NodeType2ParallelMI" label="to Parallel">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('BTreeNodeType'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="Parallel"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Backup" enablePopupBars="true">
      <defaultLayer name="Default">
        <toolSections/>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="BTreeDefinitionStandalone" label="Behaviour Tree Definition Diagram" domainClass="BTreeElement" preconditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot) or self.oclIsKindOf(BehaviourTree::BTreeContainer) or self.oclIsKindOf(BehaviourTree::BTreeDecorator)" enablePopupBars="true">
      <metamodel href="http://rds/capella/btree/1.0#/"/>
      <layout xsi:type="description_2:CustomLayoutConfiguration" id="org.eclipse.elk.graphviz.dot" label="Dot" description="Layered drawings of directed graphs. The algorithm aims edges in the same direction (top to bottom, or left to right) and then attempts to avoid edge crossings and reduce edge length. Edges are routed as spline curves and are thus drawn very smoothly. This algorithm is very suitable for state machine and activity diagrams, where the direction of edges has an important role.">
        <layoutOptions xsi:type="description_2:BooleanLayoutOption" id="org.eclipse.elk.graphviz.adaptPortPositions">
          <targets>PARENT</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:BooleanLayoutOption" id="org.eclipse.elk.graphviz.concentrate">
          <targets>PARENT</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:BooleanLayoutOption" id="org.eclipse.elk.debugMode">
          <targets>PARENT</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:EnumLayoutOption" id="org.eclipse.elk.direction">
          <targets>PARENT</targets>
          <value name="RIGHT"/>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:DoubleLayoutOption" id="org.eclipse.elk.spacing.edgeLabel">
          <targets>PARENT</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:EnumLayoutOption" id="org.eclipse.elk.edgeRouting">
          <targets>PARENT</targets>
          <value name="ORTHOGONAL"/>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:EnumLayoutOption" id="org.eclipse.elk.hierarchyHandling">
          <targets>PARENT</targets>
          <targets>NODE</targets>
          <value name="INHERIT"/>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:DoubleLayoutOption" id="org.eclipse.elk.graphviz.iterationsFactor">
          <targets>PARENT</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:DoubleLayoutOption" id="org.eclipse.elk.graphviz.labelAngle">
          <targets>EDGE</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:DoubleLayoutOption" id="org.eclipse.elk.graphviz.labelDistance">
          <targets>EDGE</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:DoubleLayoutOption" id="org.eclipse.elk.graphviz.layerSpacingFactor">
          <targets>PARENT</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:EnumSetLayoutOption" id="org.eclipse.elk.nodeSize.constraints">
          <targets>NODE</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:EnumSetLayoutOption" id="org.eclipse.elk.nodeSize.options">
          <targets>NODE</targets>
        </layoutOptions>
        <layoutOptions xsi:type="description_2:DoubleLayoutOption" id="org.eclipse.elk.spacing.nodeNode" value="30.0">
          <targets>PARENT</targets>
        </layoutOptions>
      </layout>
      <defaultLayer name="Default">
        <nodeMappings name="BTreeContainer" detailDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='btree.create.container.diagram']" labelDirectEdit="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='renameContainer']" semanticCandidatesExpression="aql:self.eAllContents()->concat(Sequence{self})" doubleClickDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='SelectBranch']" domainClass="BTreeContainer" dropDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='DropFunctionToContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='DropBTreeToContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='DropLeafToContainer']">
          <style xsi:type="style:SquareDescription" labelSize="12" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_green']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Sequence'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Sequence.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'ReactiveSequence'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="2" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveSequence.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'SequenceStar'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/SequenceStar.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Fallback'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Fallback.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'ReactiveFallback'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="2" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveFallback.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Parallel'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Parallel.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_blue']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="BTreeRoot" detailDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='btree.create.diagram']" labelDirectEdit="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='renameContainer']" semanticCandidatesExpression="aql:self" doubleClickDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='SelectBranch']" synchronizationLock="true" domainClass="BTreeRoot">
          <style xsi:type="style:SquareDescription" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelFormat>bold</labelFormat>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="BTreeLeaf" labelDirectEdit="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='renameCondition']" semanticCandidatesExpression="aql:self.eAllContents()" domainClass="BTreeLeaf" dropDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='DropFunctionToAction']">
          <style xsi:type="style:SquareDescription" labelSize="12" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_green']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Action' and not(self.function = null)">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.getLeafNodeLabel())" iconPath="/rds.capella.btree.design/icons/full/obj16/Action.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Condition'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Condition.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Action' and self.function = null">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.getLeafNodeLabel())" iconPath="/rds.capella.btree.design/icons/full/obj16/Action.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="BTreeDecorator" detailDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='btree.create.container.diagram']" labelDirectEdit="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='renameContainer']" semanticCandidatesExpression="aql:self.eAllContents()" doubleClickDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='SelectBranch']" domainClass="BTreeDecorator">
          <style xsi:type="style:SquareDescription" labelSize="12" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_green']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Repeat'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Repeat.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Retry'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Retry.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'Inverter'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Ibverter.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'ForceSuccess'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ForceSuccess.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.eClass().name = 'ForceFailure'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ForceFailure.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="BTreeInclude" detailDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='btree.create.diagram']" navigationDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='BTreeDiagramNavigate']" labelDirectEdit="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='renameBTreeInclude']" semanticCandidatesExpression="aql:self.eAllContents()" domainClass="BTreeInclude" dropDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='DropFunctionToAction'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='DropBTreeToContainer']">
          <conditionnalStyles predicateExpression="aql:self.btreeReference = null">
            <style xsi:type="style:SquareDescription" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat('Ссылка не определена')" iconPath="/rds.capella.btree.design/icons/full/obj16/BTree.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW" width="10" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:not(self.btreeReference = null)">
            <style xsi:type="style:SquareDescription" borderLineStyle="dash" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.btreeReference.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/BTree.gif" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW" width="14" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="BTreeContainerRel" sourceMapping="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeLeaf'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeInclude'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']" targetMapping="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']" targetFinderExpression="aql:self.eContainer()" reconnections="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='changeParent']">
          <style sourceArrow="InputArrow" targetArrow="NoDecoration" routingStyle="manhattan" foldingStyle="TARGET" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            <centerLabelStyleDescription labelSize="12">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <toolSections name="BehaviourTree">
          <ownedTools xsi:type="tool_2:NodeCreationDescription" name="btree.create.action" label="Action" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeLeaf']" iconPath="/rds.capella.btree.design/icons/full/obj16/Action.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Action" referenceName="ownedNodes">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Action '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::Action)->indexOf(self).toString())"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="function" valueExpression="aql:instance.createBtreeActionFunction()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeDecorator)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Action" referenceName="ownedNode">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Action '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::Action)->indexOf(self).toString())"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="function" valueExpression="aql:instance.createBtreeActionFunction()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:NodeCreationDescription" name="btree.create.condition" label="Condition" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeLeaf']" iconPath="/rds.capella.btree.design/icons/full/obj16/Condition.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Condition" referenceName="ownedNodes">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Condition '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::Condition)->indexOf(self).toString())"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeDecorator)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Condition" referenceName="ownedNode">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Sequence '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::Sequence)->indexOf(self).toString())"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:NodeCreationDescription" name="btree.create.parallel" label="Parallel" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeLeaf']" iconPath="/rds.capella.btree.design/icons/full/obj16/Parallel.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Parallel" referenceName="ownedNodes">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Condition '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::Condition)->indexOf(self).toString())"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeDecorator)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Parallel" referenceName="ownedNode">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Sequence '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::Sequence)->indexOf(self).toString())"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ToolGroup" name="SeqGroup">
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.sequence" label="Sequence" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer']" iconPath="/rds.capella.btree.design/icons/full/obj16/Sequence.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Sequence" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Sequence '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::Sequence)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Sequence" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Sequence"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeDecorator)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Sequence" referenceName="ownedNode">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Sequence'"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.reactivesequence" label="ReactiveSequence" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer']" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveSequence.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ReactiveSequence" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'ReactiveSequence '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::ReactiveSequence)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ReactiveSequence" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="ReactiveSequence"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeDecorator)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ReactiveSequence" referenceName="ownedNode">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'ReactiveSequence'"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.sequencestar" label="SequenceStar" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer']" iconPath="/rds.capella.btree.design/icons/full/obj16/SequenceStar.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceStar" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'SequenceStar '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::SequenceStar)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceStar" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="SequenceStar"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeDecorator)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceStar" referenceName="ownedNode">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'SequenceStar'"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ToolGroup" name="FallbackGroup">
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.fallback" label="Fallback" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer']" iconPath="/rds.capella.btree.design/icons/full/obj16/Fallback.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Fallback" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Fallback '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::Fallback)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Fallback" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Fallback"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeDecorator)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Fallback" referenceName="ownedNode">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Fallback'"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.reactivefallback" label="ReactiveFallback" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer']" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveFallback.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ReactiveFallback" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'ReactiveFallback '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::ReactiveFallback)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ReactiveFallback" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="ReactiveFallback"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeDecorator)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ReactiveFallback" referenceName="ownedNode">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'ReactiveFallback'"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ToolGroup" name="DecoratorGroup">
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.repeat" label="Repeat" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']" iconPath="/rds.capella.btree.design/icons/full/obj16/Repeat.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Repeat" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Repeat '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::BTreeDecorator)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Repeat" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Repeat"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.retry" label="Retry" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']" iconPath="/rds.capella.btree.design/icons/full/obj16/Retry.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Retry" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Retry '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::BTreeDecorator)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Retry" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Retry"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.iverter" label="Inverter" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']" iconPath="/rds.capella.btree.design/icons/full/obj16/Retry.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Inverter" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Inverter '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::BTreeDecorator)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Inverter" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Inverter"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.forceSuccess" label="ForceSuccess" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']" iconPath="/rds.capella.btree.design/icons/full/obj16/Retry.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ForceSuccess" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'ForceSuccess '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::BTreeDecorator)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ForceSuccess" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="ForceSuccess"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_2:NodeCreationDescription" name="btree.create.forceFailure" label="ForceFailure" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator']" iconPath="/rds.capella.btree.design/icons/full/obj16/Retry.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot']">
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeContainer)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ForceFailure" referenceName="ownedNodes">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'ForceFailure '.concat(self.eContainer().ownedNodes->filter(BehaviourTree::BTreeDecorator)->indexOf(self).toString())"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(BehaviourTree::BTreeRoot)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ForceFailure" referenceName="ownedBTreeContainer">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="ForceFailure"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:NodeCreationDescription" name="btree.create.includenew" label="Behaviour Tree" precondition="aql:true" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeInclude']" iconPath="/rds.capella.btree.design/icons/full/obj16/BTree.gif" extraMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer']">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="tool" computationExpression="Logical Function"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.eContainer().target.eContainer()">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="BTreeRoot" referenceName="ownedExtensions" variableName="newBTreeRoot">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Behaviour Tree '.concat(self.eContainer().ownedExtensions->filter(BehaviourTree::BTreeRoot)->indexOf(self).toString())"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="BTreeInclude" referenceName="ownedNodes">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:newBTreeRoot.name"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="btreeReference" valueExpression="var:newBTreeRoot"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ReconnectEdgeDescription" name="changeParent" precondition="true" forceRefresh="true" inverseSelectionOrder="true">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.changeNodeParent(source,target)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ContainerDropDescription" name="DropFunctionToContainer" precondition="aql:self.oclIsKindOf(fa::AbstractFunction)" mappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeLeaf']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newContainerView.setBTreeNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Action" referenceName="ownedNodes">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="function" valueExpression="aql:element"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ContainerDropDescription" name="DropFunctionToAction" precondition="true" mappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeLeaf']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="function" valueExpression="aql:element"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ContainerDropDescription" name="DropBTreeToContainer" precondition="aql:self.eClass().name = 'BTreeRoot'" mappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeInclude']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newSemanticContainer">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newContainerView.setBTreeNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="BTreeInclude" referenceName="ownedNodes">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="btreeReference" valueExpression="aql:element"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:EdgeCreationDescription" name="btreenode.contained.in" label="Contained in" forceRefresh="true" inverseSelectionOrder="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@edgeMappings[name='BTreeContainerRel']" iconPath="/org.polarsys.capella.core.sirius.analysis/description/images/containedIn.png">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.changeNodeParent(source.eContainer(),target)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DoubleClickDescription" name="SelectBranch" elementsToSelect="aql:Sequence{self}->concat(self.eAllContents())" mappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeContainer'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeDecorator'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeRoot']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Updated"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DiagramNavigationDescription" name="BTreeDiagramNavigate" browseExpression="aql:container.btreeReference" diagramDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ContainerDropDescription" name="DropBTreeToContainer" precondition="aql:self.eClass().name = 'BTreeRoot'" mappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeInclude']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newSemanticContainer">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newContainerView.setBTreeNodePositionHint()"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="btreeReference" valueExpression="aql:element"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DiagramCreationDescription" name="btree.create.diagram" label="Behaviour Tree Definition Diagram" browseExpression="aql:self.btreeReference" diagramDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DirectEditLabel" name="rename Action" precondition="aql:self.oclIsKindOf(BehaviourTree::Action)" inputLabelExpression="aql:self.function.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.function">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:PopupMenu" name="BTreePopupMenu" precondition="true">
            <menuItemDescription xsi:type="tool_1:OperationAction" name="NavigateToFunction" precondition="true">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql.self.btreeReference">
                  <subModelOperations xsi:type="tool_2:Navigation" createIfNotExistent="true" diagramDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']"/>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="MoveToNewBTree" precondition="true">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="v">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:v.target">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:v.getParentDiagram().target.eContainer()">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="BTreeRoot" referenceName="ownedExtensions" variableName="newBTreeRoot">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Behaviour Tree '.concat(self.eContainer().ownedExtensions->filter(BehaviourTree::BTreeRoot)->indexOf(self).toString())"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="ownedBTreeContainer" valueExpression="aql:v.target"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.setBTreeNodePositionHint()"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="BTreeInclude" referenceName="ownedNodes">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:newBTreeRoot.name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="btreeReference" valueExpression="var:newBTreeRoot"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container"/>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ContainerDropDescription" name="DropLeafToContainer" precondition="true" mappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']/@defaultLayer/@nodeMappings[name='BTreeLeaf']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.changeNodeParent(element,newSemanticContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DirectEditLabel" name="renameContainer" inputLabelExpression="aql:self.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DirectEditLabel" name="renameCondition" precondition="aql:self.oclIsKindOf(BehaviourTree::Condition)" inputLabelExpression="aql:self.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DiagramCreationDescription" name="btree.create.container.diagram" label="Behaviour Tree Definition Diagram" browseExpression="aql:self" diagramDescription="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTreeDefinitionStandalone']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:DirectEditLabel" name="renameBTreeInclude" precondition="aql:self.oclIsKindOf(BehaviourTree::BTreeInclude)" inputLabelExpression="aql:self.btreeReference.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.btreeReference">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:SequenceDiagramDescription" dropDescriptions="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@toolSections.0/@ownedTools[name='BTreeElementDragDropId']" name="BTtreeSeqDiagramStandalone" label="Behaviour Tree Sequence Diagram" domainClass="interaction.Scenario" endsOrdering="aql:self.makeIntersection(self.ownedInteractionFragments, eventEnds)" instanceRolesOrdering="feature:ownedInstanceRoles">
      <defaultLayer name="Default">
        <nodeMappings xsi:type="description_1:InstanceRoleMapping" name="Instancerole Mapping FS3" semanticCandidatesExpression="feature:ownedInstanceRoles" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
          <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <labelDirectEdit href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20instance%20role%20FS']"/>
          <borderedNodeMappings xsi:type="description_1:ExecutionMapping" name="default execution FS3" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole" reusedBorderedNodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS3']/@borderedNodeMappings[name='default%20execution%20FS3']/@borderedNodeMappings[name='Execution%20FS2']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS']" startingEndFinderExpression="aql:self" finishingEndFinderExpression="aql:self">
            <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
            <borderedNodeMappings xsi:type="description_1:ExecutionMapping" name="Execution FS2" semanticCandidatesExpression="aql:self.getExecutionsFromInstanceRoleOrParentExecution()" synchronizationLock="true" domainClass="interaction.Execution" reusedBorderedNodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS3']/@borderedNodeMappings[name='default%20execution%20FS3']/@borderedNodeMappings[name='Execution%20FS2']" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
              <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
              <borderedNodeMappings xsi:type="description_1:StateMapping" name="InteractionState Mapping FS" semanticCandidatesExpression="aql:self.getInteractionStatesOnExecution()" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.StateFragment" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
                <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']"/>
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" labelPosition="node" resizeKind="NSEW" width="10" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
                </style>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() > 0">
                  <style xsi:type="style:EllipseNodeDescription" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() = 0">
                  <style xsi:type="style:EllipseNodeDescription" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']"/>
                  </style>
                </conditionnalStyles>
              </borderedNodeMappings>
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3">
                <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
                <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
                <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
              </style>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance->filter(fa::AbstractFunction)->first().ownedPropertyValues->select( p | p.name.equals('BTreeNodeType') and p.value.name.equals('Sequence'))->size()=1">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" hideLabelByDefault="true" resizeKind="NSEW" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'BTreeRoot'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
                  <labelFormat>bold</labelFormat>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'Sequence'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'ReactiveSequence'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.representedInstance.eClass().name = 'SequenceStar'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'Fallback'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'ReactiveFallback'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'Condition'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'Parallel'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_blue']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'Repeat'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'Retry'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'Inverter'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NSEW" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'ForceSuccess'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.eClass().name = 'ForceFailure'">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" labelPosition="node" resizeKind="NORTH_SOUTH" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
                </style>
              </conditionnalStyles>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_1:EndOfLifeMapping" name="Lifeline deletion mapping FS2" preconditionExpression="aql:self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self)" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
              <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20FS']"/>
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/eol.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_1:EndOfLifeMapping" name="endOfLife FS2" preconditionExpression="aql:not (self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self))" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.InstanceRole">
              <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='No%20Delete']"/>
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/handlelifeline.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" sizeComputationExpression="" labelPosition="node" resizeKind="NSEW" width="1" height="40">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Lifeline_Gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.name" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='red']"/>
            <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'Action'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().ownedNodes->indexOf(self).toString().concat('. ').concat(self.getLeafNodeLabel())" iconPath="/rds.capella.btree.design/icons/full/obj16/Action.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'Condition'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Condition.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'Sequence'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Sequence.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'ReactiveSequence'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveSequence.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'SequenceStar'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/SequenceStar.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'Fallback'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Fallback.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'ReactiveFallback'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ReactiveFallback.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_chocolate']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'Parallel'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Parallel.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_blue']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'Repeat'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Repeat.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'Retry'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Retry.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'Inverter'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/Ibverter.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'ForceSuccess'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ForceSuccess.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'ForceFailure'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.eContainer().subFunctions->indexOf(self).toString().concat('. ').concat(self.name)" iconPath="/rds.capella.btree.design/icons/full/obj16/ForceFailure.gif" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']"/>
              <labelColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.eClass().name = 'BTreeRoot'">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" labelPosition="node" resizeKind="NSEW" width="10" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings xsi:type="description_1:BasicMessageMapping" name="Basic message mapping FS2" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::SYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::ASYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::UNSET)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS3']/@borderedNodeMappings[name='default%20execution%20FS3'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS3']/@borderedNodeMappings[name='default%20execution%20FS3']/@borderedNodeMappings[name='Execution%20FS2']" targetMapping="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS3']/@borderedNodeMappings[name='default%20execution%20FS3'] //@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS3']/@borderedNodeMappings[name='default%20execution%20FS3']/@borderedNodeMappings[name='Execution%20FS2']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <deletionDescription href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <labelDirectEdit href="platform:/plugin/org.polarsys.capella.core.sirius.analysis/description/common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20FS']"/>
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="aql:self.ownedPropertyValues->select( p | p.name.equals('TickResult') and p.value.equals('SUCCESS'))->size()==1">
            <style lineStyle="dash" sourceArrow="Diamond" sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.ownedPropertyValues->select( p | p.name.equals('TickResult') and p.value.equals('FAILURE'))->size()==1">
            <style lineStyle="dash" sourceArrow="Diamond" sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_orange']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_orange']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.ownedPropertyValues->select( p | p.name.equals('TickResult') and p.value.equals('RUNNING'))->size()==1">
            <style lineStyle="dash" sourceArrow="Diamond" sizeComputationExpression="2">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.ownedPropertyValues->select( p | p.name.equals('TickResult'))->size()==1">
            <style lineStyle="dash" sourceArrow="Diamond">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <toolSections>
          <ownedTools xsi:type="tool:InstanceRoleCreationTool" documentation="Insert/Remove Functions. Creates or delete semantic Lifelines representing existing Functions. Removing a Lifeline from a scenario deletes incoming and outgoing sequence messages, but does not delete from model the represented Functions and related Functional Exchanges." name="functions" label="Functions" nodeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS3']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Function" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.eContainerOrSelf(capellacore::ModellingArchitecture).ownedFunctionPkg.eAllContents()->filter(fa::AbstractFunction)"/>
                  <parameters name="initialSelection" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance"/>
                  <parameters name="wizardMessage" value=""/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(result)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i)"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                  <parameters name="result" value="aql:self.void2Null(result)"/>
                  <parameters name="current" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange3" label="Tick message" precondition="aql:preTarget.representedInstance.eContainer() == preSource.representedInstance or preTarget.representedInstance.eContainer() == preSource.covered.representedInstance" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetIR.representedInstance.eContainer() = source.representedInstance">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:targetIR.representedInstance.name"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="tickResult"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:tickResult">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="TickResult"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange.successtick" label="Seccess tick" precondition="aql:preTarget.representedInstance.eContainer() == preSource.representedInstance or preTarget.representedInstance.eContainer() == preSource.covered.representedInstance" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetIR.representedInstance.eContainer() = source.representedInstance">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:targetIR.representedInstance.name"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="tickResult"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:tickResult">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="TickResult"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="SUCCESS"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange.failuretick" label="Failure tick" precondition="aql:preTarget.representedInstance.eContainer() == preSource.representedInstance or preTarget.representedInstance.eContainer() == preSource.covered.representedInstance" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetIR.representedInstance.eContainer() = source.representedInstance">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:targetIR.representedInstance.name"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="tickResult"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:tickResult">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="TickResult"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="FAILURE"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange.runningtick" label="Running tick" precondition="aql:preTarget.representedInstance.eContainer() == preSource.representedInstance or preTarget.representedInstance.eContainer() == preSource.covered.representedInstance" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetIR.representedInstance.eContainer() = source.representedInstance">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:targetIR.representedInstance.name"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringPropertyValue" referenceName="ownedPropertyValues" variableName="tickResult"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:tickResult">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="TickResult"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="RUNNING"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange2" label="Data flow" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="FEF"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ContainerDropDescription" name="BTreeElementDragDropId" mappings="//@ownedViewpoints[name='Behaviour%20Tree%20Viewpoint']/@ownedRepresentations[name='BTtreeSeqDiagramStandalone']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS3']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:element"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:PopupMenu" name="SetTickResultMenu" label="Tick result" precondition="true">
            <menuItemDescription xsi:type="tool_1:OperationAction" name="SetTickSuccessMenuAction" label="SUCCESS">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('TickResult'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="SUCCESS"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="SetTickFailureMenuAction" label="FAILURE">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('TickResult'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="FAILURE"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="SetTickRunningMenuAction" label="RUNNING">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('TickResult'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value" valueExpression="RUNNING"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="SetTickUndefinedMenuAction" label="UNDEFINED">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:For" expression="aql:views" iteratorName="view">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:view.target.ownedPropertyValues->select( p | p.name.equals('TickResult'))->first()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="value"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="rds.capella.btree.design.service.BTreeService"/>
    <ownedJavaExtensions qualifiedClassName="rds.capella.btree.design.service.BTreeNativeService"/>
  </ownedViewpoints>
</description:Group>
